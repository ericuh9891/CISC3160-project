(DONE)Try coding java example into python with sample grammar

(DONE)Try first and follow on sample grammar to see if it's the reason for the extra match cases

(DONE)Eliminate left recursion on project CFG

(DONE)Do First and Follow on project CFG

(DONE)prototype python syntax checker similar to sample grammer program
  -(DONE)Do First and Follow for [Letter|D]* and D*

(DONE)Try to tokenize into +,-,*,(,),=,id,literal
  *Tokenizing while it's doing recursive syntax checks does not produce
   tokens in the correct order
  -(DONE)Try tokenizing inside the next_char method

(DONE)Refactor out Token classes

(DONE)Create parser
  -For creating unary - and + tokens, try checking the token preceding it,
   if it's a literal or an identifier or another unary + or -, then the token should be a unary + or -

(DONE)Interpret the syntax tree
  -Try something similar to the recursive descent parser

(DONE)Try value replacement on id nodes when being traversed
  -Bug, shouldn't do replacement on left hand side of assignment operator
  
(DONE)Try putting syntax errors messages in the recursive descent parser